Index: src/app/uploader/uploader.page.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n<ion-content>\n    <ion-grid class=\"container\">\n        <h3>Quotation</h3>\n        <!--<h5>Instruction</h5>-->\n        <p>Upload an image of the furniture you would like to move by clicking the <strong>\"Choose File\"</strong> button </p>\n        <app-loading class=\"center\" *ngIf=\"busy==true\"></app-loading>\n\n\n\n       <div *ngIf=\"showFirstUploadPage==true\" class=\"center\">\n\n           <div *ngIf=\"showUploadModule==true\" class=\"upload\" [hidden]=\"!model\">\n               <div *ngIf=\"!uploadFail\" >\n               Upload an image:<br>\n               <input #fileUpload type=\"file\" id=\"files\" name=\"files[]\" (change)=\"fileChangeEvent($event)\" />\n               </div>\n\n               <div *ngIf=\"uploadFail\" id=\"content\">\n                   Unable to accurately classify, please upload again <br>\n                   Here is a set of good and bad example: <br>\n                  <div id=\"image\">\n                      <img class=\"logo\" src=\"../../assets/img/Correct.png\">\n                      <img class=\"logo\" src=\"../../assets/img/Wrong.png\">\n                  </div>\n\n                   <input #fileUpload type=\"file\" id=\"files\" name=\"files[]\" (change)=\"fileChanged($event)\" />\n               </div>\n           </div>\n\n           <div class=\"hide-div\">\n               <img #chosenImage width=\"224\" height=\"224\" class=\"sample-image\" />\n               <div class=\"predictions\">\n                   <div *ngFor=\"let class of classes\" class=\"row\">\n                       <div class=\"col-sm-6\">\n                           {{class.className}}\n                       </div>\n                       <div class=\"col-sm-6\">\n                           {{class.probability.toFixed(3)}}\n                       </div>\n                       <div class=\"col-sm-6\">\n                           {{class.confidence}}\n                       </div>\n                   </div>\n               </div>\n           </div>\n\n           <div *ngIf=\"showErrorMsg==true\">\n               <ion-card class=\"error-msg\">\n                   Unable to determine the furniture from image. We have sent our team<br><br>\n\n                   Sorry for any inconvenience caused, for immediate enquires please contact us at sales@rentalorry or 65898964.<br><br>\n\n                   Have a great day!<br><br><br>\n\n                   Error Code: 401<br><br>\n\n                   <span *ngIf=\"imageURL\">Order ID: {{ imageURL }}<br><br></span>\n               </ion-card>\n\n               <ion-button class=\"center-left-right\" shape=\"round\" color=\"primary\" (click)=\"backToHome()\" fill=\"outline\"> Home</ion-button>\n           </div>\n\n           \n        </div>\n\n       <div class=\"center\" *ngIf=\"!busy\">\n\n            <input type=\"file\" *ngIf=\"!imageURL\" (change)=\"fileChanged($event)\" class=\"filebtn\" #fileButton />\n\n            <div class=\"hide-div\" *ngIf=\"!uploadFail\" >\n                <ion-button shape=\"round\" color=\"primary\" (click)=\"uploadFile()\" *ngIf=\"!imageURL\" fill=\"outline\"> Upload Image to Get a Quote</ion-button>\n            </div>\n            <br>\n\n            <div *ngIf=\"showSecondUploadPage && !busy\">\n\n                <ion-col size=\"12\">\n                    <div class=\"upload-image\">\n                        <ion-img src=\"https://ucarecdn.com/{{ imageURL }}/-/preview/{{ activeEffect }}\"></ion-img>\n                    </div>\n\n                    <ion-card-content>\n                        <div *ngIf=\"image1Classification\" >Item: {{ image1Classification }}</div>\n<!--                        <ion-textarea placeholder=\"Enter shifting instructions, if not key in 'NA'\" [(ngModel)]=\"desc\"></ion-textarea>-->\n                        <ion-button shape=\"round\" color=\"primary\" (click)=\"createOrder()\">Continue</ion-button>\n\n                    </ion-card-content>\n                </ion-col>\n\n                <ion-grid>\n                    <ion-row>\n\n\n                    </ion-row>\n\n\n\n\n                </ion-grid>\n\n\n            </div>\n       </div>\n    </ion-grid>\n\n\n\n\n\n</ion-content>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/uploader/uploader.page.html	(revision 8678e9cb4c88115491ff76081818d5b418279323)
+++ src/app/uploader/uploader.page.html	(date 1585553078591)
@@ -13,7 +13,7 @@
            <div *ngIf="showUploadModule==true" class="upload" [hidden]="!model">
                <div *ngIf="!uploadFail" >
                Upload an image:<br>
-               <input #fileUpload type="file" id="files" name="files[]" (change)="fileChangeEvent($event)" />
+               <input #fileUpload type="file" id="files" name="files[]" (change)="fileChanged($event)" />
                </div>
 
                <div *ngIf="uploadFail" id="content">
Index: src/app/uploader/uploader.page.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, Directive, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { UserService } from '../user.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { firestore } from 'firebase/app';\nimport { Router } from '@angular/router';\nimport * as tf from '@tensorflow/tfjs';\nimport { IMAGENET_CLASSES } from '../../assets/imagenet-classes';\nimport * as moment from 'moment';\n\nimport { LoadingController } from '@ionic/angular';\n\n\nconst IMAGE_SIZE = 224;\nconst TOPK_PREDICTIONS = 5;\n\n@Component({\n  selector: 'app-uploader',\n  templateUrl: './uploader.page.html',\n  styleUrls: ['./uploader.page.scss'],\n})\n\nexport class UploaderPage implements OnInit {\n    // private model\n    model: tf.Model;\n    classes: any[];\n    imageData: ImageData;\n    data = new FormData();\n\n    imageURL; string;\n    desc: string;\n    busy: boolean = false;\n    noFace: boolean = false;\n    simulateResponse;\n    private test123: string;\n    uploadFail;\n    lowAccuracyCounter = 0;\n    fileUploadCounter = 1;\n    showUploadModule = true;\n    showErrorMsg = false;\n    showFirstUploadPage = true;\n    showSecondUploadPage = false;\n\n    orderStatus;\n    orderItemsPredicted;\n\n    image1Classification: any;\n\n    loading: any;\n\n\n\n    @ViewChild('chosenImage', { static: false }) img: ElementRef;\n    @ViewChild('fileUpload', { static: false }) fileUpload: ElementRef;\n\n    // @ViewChild(\"chosenImage\") img: ElementRef;\n    // @ViewChild(\"fileUpload\") fileUpload: ElementRef;\n\n\n    scaleCrop: string = '-/scale_crop/200x200';\n\n    effects = {\n        effect1: '',\n        effect2: '-/exposure/50/-/saturation/50/-/warmth/-30/',\n        effect3: '-/filter/vevera/150/',\n        effect4: '-/filter/carris/150/',\n        effect5: '-/filter/misiara/150/'\n    }\n\n    activeEffect: string = this.effects.effect1\n    faces\n    event\n\n\n    @ViewChild('fileButton', { static: false }) fileButton;\n    @ViewChild('mobileNetUploadBtn', { static: false }) mobileNetUploadBtn;\n    // @ViewChild('fileButton') fileButton\n    private image1Confidence: string;\n    private image1Probabilty: string;\n\n\n    constructor(\n        public http: HttpClient,\n        public afstore: AngularFirestore,\n        public user:UserService,\n        public route: Router,\n        public loadingController: LoadingController,\n        ) { }\n\n    ngOnInit() {\n        this.loadModel();\n\n\n    }\n\n    //loading\n    async presentLoading() {\n        this.loading = await this.loadingController.create({\n            message: 'Please wait...',\n        });\n        await this.loading.present();\n    }\n\n    removeLoading() {\n        this.loading.dismiss();\n    }\n\n\n    // AI Stuff\n\n    async loadModel() {\n        console.log('Loading model..')\n        this.model = await tf.loadModel(\"../../assets/model.json\");\n        console.log('Model Loaded!')\n    }\n\n    fileChangeEvent(event: any) {\n        this.busy = true;\n        //TODO: Fix async issue. need to load twice\n        for(this.fileUploadCounter = 1; this.fileUploadCounter<3; this.fileUploadCounter++){\n\n            const file = event.target.files[0];\n            console.log(file)\n            if (!file || !file.type.match(\"image.*\")) {\n                return;\n            }\n\n            this.classes = [];\n\n            const reader = new FileReader();\n            reader.onload = e => {\n                // console.log('e:',e)\n                this.img.nativeElement.src = e.target[\"result\"];\n                // console.log('Img.nativeElement: ',this.img.nativeElement)\n                this.predict(this.img.nativeElement,file);\n                // console.log('Predict: ',this.predict(this.img.nativeElement,file))\n\n            };\n            reader.readAsDataURL(file);\n            console.log(\"No of times file was uploaded: \" + this.fileUploadCounter)\n        }\n        this.busy = false;\n\n\n\n    }\n\n    async predict(imageData: ImageData,file): Promise<any> {\n        this.fileUpload.nativeElement.value = \"\";\n        const startTime = performance.now();\n        const logits = tf.tidy(() => {\n            // tf.fromPixels() returns a Tensor from an image element.\n            const img = tf.fromPixels(imageData).toFloat();\n\n            const offset = tf.scalar(127.5);\n            // Normalize the image from [0, 255] to [-1, 1].\n            const normalized = img.sub(offset).div(offset);\n\n            // Reshape to a single-element batch so we can pass it to predict.\n            const batched = normalized.reshape([1, IMAGE_SIZE, IMAGE_SIZE, 3]);\n\n            // Make a prediction through mobilenet.\n            return this.model.predict(batched);\n        });\n\n        // Convert logits to probabilities and class names.\n        this.classes = await this.getTopKClasses(logits, 1,file);\n        // console.log(this.classes)\n        const totalTime = performance.now() - startTime;\n        // console.log(`Done in ${Math.floor(totalTime)}ms`);\n    }\n\n    async getTopKClasses(logits, topK,file): Promise<any[]> {\n        console.log('Top K: ',topK);\n        const values = await logits.data();\n\n        const valuesAndIndices = [];\n        for (let i = 0; i < values.length; i++) {\n            valuesAndIndices.push({ value: values[i], index: i });\n        }\n        valuesAndIndices.sort((a, b) => {\n            return b.value - a.value;\n        });\n        const topkValues = new Float32Array(topK);\n        const topkIndices = new Int32Array(topK);\n        for (let i = 0; i < topK; i++) {\n            topkValues[i] = valuesAndIndices[i].value;\n            topkIndices[i] = valuesAndIndices[i].index;\n        }\n\n        const topClassesAndProbs = [];\n        for (let i = 0; i < topkIndices.length; i++) {\n            console.log('Top K values: ',topkValues[i])\n            var confidence = '';\n            if (topkValues[i] < 0.7) {\n                console.log('Low accuracy counter: ',this.lowAccuracyCounter);\n                //Low accuracy and first upload, ask user to upload again\n                this.lowAccuracyCounter ++;\n                console.log('Low accuracy counter: ',this.lowAccuracyCounter);\n                //user uploaded twice with low accuracy\n                if (this.lowAccuracyCounter === 2 ) {\n                    //display message to indicate upload failed and ask for re-upload\n                    this.uploadFail = true;\n                } else if (this.lowAccuracyCounter > 2 ) {\n                    //show error msg and inform admin\n                    this.showUploadModule = false;\n                    this.showErrorMsg = true;\n\n\n                    //post to upload care so admin can see image\n                    this.data.append('file', file)\n                    this.data.append('UPLOADCARE_STORE', '1')\n                    this.data.append('UPLOADCARE_PUB_KEY', '3f6ba0e51f55fa947944')\n                    console.log(this.data)\n\n                    // post to uploadcare\n                    this.http.post('https://upload.uploadcare.com/base/', this.data)\n                        .subscribe(event => {\n                            console.log(event);\n                            this.imageURL = event['file'];\n                            console.log(this.imageURL);\n\n                        })\n\n                    // inform admin with the details\n\n                }\n\n                confidence= 'Low Confidence';\n            }\n            else {\n                this.busy = true;\n                //confidence is high -> upload to imagecare and show second upload page view\n                confidence= 'High Confidence';\n\n                this.data.append('file', file)\n                this.data.append('UPLOADCARE_STORE', '1')\n                this.data.append('UPLOADCARE_PUB_KEY', '3f6ba0e51f55fa947944')\n                console.log(this.data)\n\n                // post to uploadcare\n                this.http.post('https://upload.uploadcare.com/base/', this.data)\n                    .subscribe(event => {\n                        console.log(event)\n                        this.imageURL = event['file']\n                        console.log(this.imageURL)\n                        this.busy = false\n                    })\n                this.showErrorMsg = false;\n                this.showFirstUploadPage = false;\n                this.showSecondUploadPage = true;\n                this.busy = false;\n            }\n            topClassesAndProbs.push({\n                className: IMAGENET_CLASSES[topkIndices[i]],\n                probability: topkValues[i],\n                confidence: confidence\n            });\n        }\n\n        return topClassesAndProbs;\n\n    }\n\n    // End AI Stuff\n\n    uploadFileMNet() {\n        this.mobileNetUploadBtn.nativeElement.click()\n    }\n\n\n    uploadFile() {\n        this.fileButton.nativeElement.click()\n    }\n\n    setSelected(effect: string) {\n        this.activeEffect = this.effects[effect]\n    }\n\n    //old function - do not use\n    fileChanged(event: any) {\n        this.busy = true\n        const files = event.target.files\n        const file = files[0]\n        console.log(file)\n\n\n        //so that if no file, the POST request won't happen\n        if (file) {\n\n            //prepare data\n            const data = new FormData()\n            data.append('image_file', file)\n\n            console.log('Posting image to our model ... wait around 20 secs for result ... BUT the model fails to return a result 1 in 2 times')\n            console.log('If >20secs, likely \"failure case\", will have some error showing up, dont be alarmed by CORS error cos it is due to \"failure\"')\n            this.http.post('https://furnitureclassifier1.appspot.com/predict/', data)\n                .subscribe(event => {\n                    console.log(event)\n                    // this.imageURL = event['file']\n                    // console.log(this.imageURL)\n                    this.busy = false\n                })\n\n\n        }\n\n\n        let simulateResponse1;\n\n        simulateResponse1 = {\n            \"Classification\": \"sofa 2-seater\",\n            \"Confidence\": \"Low Confidence\",\n            \"Probabilty\": \"97.26%\"\n        }\n\n        this.image1Classification = simulateResponse1.Classification\n        this.image1Confidence = simulateResponse1.Confidence\n        this.image1Probabilty = simulateResponse1.Probabilty\n\n        if (this.image1Confidence === \"Low Confidence\") {\n            this.image1Classification = null;\n        }\n\n\n        if (this.image1Confidence === \"High Confidence\")\n        {\n            //prepare data\n            const data = new FormData()\n            data.append('file', files[0])\n            data.append('UPLOADCARE_STORE', '1')\n            data.append('UPLOADCARE_PUB_KEY', '3f6ba0e51f55fa947944')\n\n            // post to uploadcare\n            this.http.post('https://upload.uploadcare.com/base/', data)\n                .subscribe(event => {\n                    console.log(event)\n                    this.imageURL = event['file']\n                    console.log(this.imageURL)\n                    this.busy = false\n                })\n\n\n        }\n        else\n\n        {\n            this.uploadFail = true;\n\n            //user uploaded twice with low accuracy\n            if (this.lowAccuracyCounter === 1 ) {\n                //post to firebase, and continue flow without quotation.\n                this.uploadFail = null;\n\n                //prepare data\n                const data = new FormData()\n                data.append('file', files[0])\n                data.append('UPLOADCARE_STORE', '1')\n                data.append('UPLOADCARE_PUB_KEY', '3f6ba0e51f55fa947944')\n\n                // post to uploadcare\n                this.http.post('https://upload.uploadcare.com/base/', data)\n                    .subscribe(event => {\n                        console.log(event)\n                        this.imageURL = event['file']\n                        console.log(this.imageURL)\n                        this.busy = false\n                    })\n\n                    //TODO: send info to skip price estimate page\n\n            } else {\n\n                this.lowAccuracyCounter += 1;\n                console.log(this.lowAccuracyCounter);\n                this.busy = false;\n            }\n\n\n        }\n\n\n\n        // // post method for image classification\n        // this.http.post('https://8080-dot-10558302-dot-devshell.appspot.com/predict/', data)\n        //     .subscribe(event => {\n        //         console.log(event)\n        //         // this.imageURL = event['file']\n        //         // console.log(this.imageURL)\n        //         // this.busy = false\n        //\n        //     })\n\n\n        //TODO:\n        // Write AI function here\n    }\n\n    backToHome() {\n        this.showUploadModule = true;\n        this.showErrorMsg = false;\n        this.showFirstUploadPage = true;\n        this.showSecondUploadPage = false;\n        this.uploadFail = false;\n        this.route.navigate(['/tabs/feed/'])\n    }\n\n    createOrder() {\n        let now = moment(); // add this 2 of 4\n        this.busy = true\n        const orderID = this.imageURL\n        const activeEffect = this.activeEffect\n        // const desc = this.desc\n\n        // TODO: Upload multiple items\n        // temporary single item\n        let predictedItems = {};\n        predictedItems[this.classes[0]['className']] = 1;\n\n        this.afstore.doc(`users/${this.user.getUID()}`).update({\n            // posts: firestore.FieldValue.arrayUnion(image)\n            order: firestore.FieldValue.arrayUnion(`${orderID}`)\n        })\n\n        this.afstore.doc(`posts/${orderID}`).set({\n            // desc,\n            author: this.user.getUsername(),\n            likes: [],\n            effect: activeEffect\n        })\n\n        //TODO use server time\n        // require('firebase-admin').firestore.FieldValue;\n\n        //Pre-configure variables before pushing to firestore\n\n        if (this.lowAccuracyCounter === 1) {\n            this.orderStatus = \"Require Manual Verification\";\n        } else {\n            this.orderStatus = \"Created Order\";\n        }\n\n        this.orderItemsPredicted = {image1Classification:1}\n\n\n        // Push to firestore\n        this.afstore.doc(`order/${orderID}`).set({\n            image: orderID,\n            user: this.user.getUsername(),\n            // desc,\n\n            // Order flow Upload Image -> Price Estimate -> Booking Date -> Payment -> Confirmation\n\n            //Order Status:\n            // 1: \"Require Manual Verification\"\n            // 2: \"Created Order\"\n            // 3: \"Created Price Estimate\"\n            // 4: \"Created Booking Date\"\n            // 5: \"Completed Payment\"\n            // 6: \"Order Confirmed\"\n\n            orderStatus: this.orderStatus,\n\n\n            //Payment Status:\n            // 0: \"Booking Date Not Confirmed\" Have not reached booking page\n            // 1: \"Paid\"\n            // 2: \"Cash on delivery'\n            // 3: \"Payment failed\"\n            // ** Only after orderStatus == \"Confirmed\" fulfillmentStatus == \"Order Placed\"\n            paymentStatus: \"Booking Date Not Confirmed\",\n\n\n\n\n\n            // ** Only after orderStatus == \"Confirmed\" fulfillmentStatus == \"Order Placed\"\n            fulfillmentStatus: \"Order Not Confirmed\",\n            // orderItemsPredicted: this.classes[0]['className'],\n            orderItemsPredicted: predictedItems,\n\n\n            dateTimeOfOrder: now.format(),\n            driverID: \"Driver1234\",\n        })\n\n        this.busy = false;\n        this.imageURL = \"\";\n        // this.desc = \"\";\n\n        if (this.lowAccuracyCounter === 1) {\n            this.route.navigate(['/estimateprice/'+ orderID])\n        } else if (this.lowAccuracyCounter === 3) {\n            //skip estimate price, go to booking page directly\n            this.route.navigate(['/estimateprice/'+ orderID])\n\n        } else if (this.lowAccuracyCounter > 3) {\n            //skip estimate price, go to booking page directly\n            this.route.navigate(['/booking/'+ orderID])\n\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/app/uploader/uploader.page.ts	(revision 8678e9cb4c88115491ff76081818d5b418279323)
+++ src/app/uploader/uploader.page.ts	(date 1585554902254)
@@ -35,7 +35,7 @@
     private test123: string;
     uploadFail;
     lowAccuracyCounter = 0;
-    fileUploadCounter = 1;
+    fileUploadCounter = 0;
     showUploadModule = true;
     showErrorMsg = false;
     showFirstUploadPage = true;
@@ -109,9 +109,7 @@
     // AI Stuff
 
     async loadModel() {
-        console.log('Loading model..')
         this.model = await tf.loadModel("../../assets/model.json");
-        console.log('Model Loaded!')
     }
 
     fileChangeEvent(event: any) {
@@ -277,6 +275,7 @@
         this.activeEffect = this.effects[effect]
     }
 
+
     //old function - do not use
     fileChanged(event: any) {
         this.busy = true
@@ -296,11 +295,31 @@
             console.log('If >20secs, likely "failure case", will have some error showing up, dont be alarmed by CORS error cos it is due to "failure"')
             this.http.post('https://furnitureclassifier1.appspot.com/predict/', data)
                 .subscribe(event => {
-                    console.log(event)
+                    this.simulateResponse = event;
+                    console.log("Classification data:");
+                    console.log(this.simulateResponse);
+                    // console.log(this.simulateResponse.Probabilty);
+                    // console.log(event)
+
                     // this.imageURL = event['file']
                     // console.log(this.imageURL)
                     this.busy = false
                 })
+            this.fileUploadCounter ++
+            console.log(this.fileUploadCounter)
+
+            if (false) {
+                //upload image
+                console.log('high confidence')
+                // high probability, show image and allow user to proceed to next page
+                this.showUploadModule = false;
+
+
+
+            } else {
+                console.log('high confidence');
+                this.uploadFail = true;
+            }
 
 
         }
